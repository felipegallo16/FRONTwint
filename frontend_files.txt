=== src/components/Verify.tsx ===

=== lib/minikit-mock.ts ===
"use client"

// Simulación de MiniKit para desarrollo
export const MockMiniKit = {
  isInstalled: () => true,
  install: (appId: string) => console.log("Mock MiniKit installed with appId:", appId),
  unsubscribeAll: () => console.log("Mock MiniKit unsubscribed from all events"),
  user: {
    username: "demo_user",
    walletAddress: "0xdemo1234567890abcdef1234567890abcdef123456",
  },
  commandsAsync: {
    walletAuth: async (options: any) => {
      console.log("Mock walletAuth called with options:", options)
      return {
        commandPayload: { status: "success" },
        finalPayload: {
          status: "success",
          address: "0xdemo1234567890abcdef1234567890abcdef123456",
          username: "demo_user",
        },
      }
    },
    verify: async ({ action, verification_level, signal }: { action: string, verification_level: string, signal?: string }) => {
      console.warn("Mock verify called with options:", { action, verification_level, signal })
      return {
        commandPayload: { status: "success" },
        finalPayload: {
          status: "success",
          merkle_root: "0x1234567890abcdef",
          nullifier_hash: "0xabcdef1234567890",
          proof: "0x...",
          verification_level: verification_level || "orb",
        },
      }
    },
    pay: async (options: any) => {
      console.log("Mock pay called with options:", options)
      return {
        commandPayload: { status: "success" },
        finalPayload: {
          status: "success",
          transaction_id: "tx_" + Math.random().toString(36).substring(2, 15),
        },
      }
    },
    sendTransaction: async (options: any) => {
      console.log("Mock sendTransaction called with options:", options)
      return {
        commandPayload: { status: "success" },
        finalPayload: {
          status: "success",
          transaction_id: "tx_" + Math.random().toString(36).substring(2, 15),
        },
      }
    },
    signMessage: async (options: any) => {
      console.log("Mock signMessage called with options:", options)
      return {
        commandPayload: { status: "success" },
        finalPayload: {
          status: "success",
          signature: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
        },
      }
    },
    signTypedData: async (options: any) => {
      console.log("Mock signTypedData called with options:", options)
      return {
        commandPayload: { status: "success" },
        finalPayload: {
          status: "success",
          signature: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
        },
      }
    },
  },
  getUserByUsername: async (username: string) => {
    console.log("Mock getUserByUsername called with username:", username)
    return {
      walletAddress: "0xdemo1234567890abcdef1234567890abcdef123456",
      username: username,
    }
  },
}

// Definir la interfaz para MiniKit
interface MiniKit {
  isInstalled: () => boolean;
  install: (appId: string) => void;
  unsubscribeAll: () => void;
  user: {
    username: string;
    walletAddress: string;
  };
  commandsAsync: {
    walletAuth: (options: any) => Promise<any>;
    verify: (options: { action: string, verification_level: string, signal?: string }) => Promise<any>;
    pay: (options: any) => Promise<any>;
    sendTransaction: (options: any) => Promise<any>;
    signMessage: (options: any) => Promise<any>;
    signTypedData: (options: any) => Promise<any>;
  };
  getUserByUsername: (username: string) => Promise<any>;
}

// Función para obtener MiniKit (real o simulado)
export function getMiniKit(): MiniKit | null {
  if (typeof window !== "undefined") {
    // Verificar si estamos en World App
    if (window.MiniKit) {
      console.log("Using real MiniKit from World App");
      return window.MiniKit as MiniKit;
    }
    console.warn("World App not detected, using MockMiniKit (this should only happen in development)");
    return MockMiniKit;
  }
  // En el servidor, devolver null
  return null;
}

// Exportar funciones simuladas para tokenToDecimals
export const tokenToDecimals = (amount: number, token: string) => {
  const decimals = token === "WLD" ? 18 : 6
  return BigInt(amount * 10 ** decimals)
}

export const Tokens = {
  WLD: "WLD",
  USDCE: "USDCE",
} as const
=== package.json ===
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "latest",
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "@types/uuid": "^10.0.0",
    "@worldcoin/mini-apps-ui-kit-react": "latest",
    "@worldcoin/minikit-js": "latest",
    "@worldcoin/minikit-react": "latest",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "latest",
    "embla-carousel-react": "8.5.1",
    "framer-motion": "latest",
    "input-otp": "1.4.1",
    "jose": "latest",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "vaul": "^0.9.6",
    "viem": "latest",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22.15.18",
    "@types/react": "^19.1.4",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.3"
  }
}
=== .env.local ===
NEXT_PUBLIC_API_URL="https://wintrust-backend.onrender.com"
NEXTAUTH_SECRET="dUfJM+Xx/tVUnJmoGUfrgtStdKWhnJae9Fi4rXvDo58="
HMAC_SECRET_KEY="QYPle9rGvBA5YRhtk0FGfLB0gAJg2YftU5QUW0RsPaU="
NEXT_PUBLIC_APP_ID="app_7ec5fc1205e05862fcd2ecd6f8bdb0ab"
NEXT_PUBLIC_WORLD_APP_ID="app_7ec5fc1205e05862fcd2ecd6f8bdb0ab"

